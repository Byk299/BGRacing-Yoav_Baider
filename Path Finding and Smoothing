import numpy as np
import pandas as pd
from scipy.interpolate import CubicSpline
import matplotlib.pyplot as plt

# Loading and storing the data
file_path = "/content/sample_data/BrandsHatchLayout.csv"  # Update the path if needed so it fits your file path
data = pd.read_csv(file_path)

# Separating the cones into left and right
left_cones = data[data['side'] == 'left'][['x', 'y']].to_numpy()
right_cones = data[data['side'] == 'right'][['x', 'y']].to_numpy()

# Computing the midpoints
midpoints = (left_cones + right_cones) / 2

# Appplying a smoothing function
def smooth_path(path, alpha):
    smoothed_path = np.copy(path)
    for i in range(1, len(path) - 1):
        smoothed_path[i] = ((1 - alpha) * path[i] + 
                             alpha * (path[i - 1] + path[i + 1]) / 2)
    return smoothed_path

# Applying the smoothing function to the midpoints path
alpha = 0.8
smoothed_midpoints = smooth_path(midpoints, alpha)

# Fitting a cubic spline to the smoothed path
x = smoothed_midpoints[:, 0]
y = smoothed_midpoints[:, 1]
t = np.arange(len(x))

spline = CubicSpline(t, np.stack((x, y), axis=1), axis=0)

# Generating a smooth path using the spline
t_smooth = np.linspace(0, len(x) - 1, 300)  # Increase the resolution
smooth_path = spline(t_smooth)

# Plotting the cones, the smoothed midpoints, and the final 'splined' path
plt.figure(figsize=(20, 12))
plt.plot(left_cones[:, 0], left_cones[:, 1], 'o', label='Left Cones')
plt.plot(right_cones[:, 0], right_cones[:, 1], 'o', label='Right Cones')
plt.plot(midpoints[:, 0], midpoints[:, 1], '--', label='Midpoints (Initial Path)')
plt.plot(smooth_path[:, 0], smooth_path[:, 1], '-', label='Final Smoothed Path')
plt.legend()
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Path Smoothing through Midpoints and Spline")
plt.axis("equal")
plt.show()
